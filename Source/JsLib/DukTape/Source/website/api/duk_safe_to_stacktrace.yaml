name: duk_safe_to_stacktrace

proto: |
  const char *duk_safe_to_stacktrace(duk_context *ctx, duk_idx_t idx);

stack: |
  [ ... val! ... ] -> [ ... val.stack! ... ]

summary: |
  <p>Like <code><a href="#duk_safe_to_string">duk_safe_to_string()</a></code> but
  instead of converting a value to a string, it converts an error to a stacktrace.
  If the object is not an error, it will fallback to duk_safe_to_string(). If there
  is an error when reading .stack, it will return the stacktrace of that error.</p>

example: |
  /* Throw Error and print stacktrace */
  duk_eval_string(ctx, "function err() { throw new Error(); }; err();");
  printf("stacktrace: %s\n", duk_safe_to_stacktrace(ctx, -1));  /* -> "Error at err (eval:1)" */
  duk_pop(ctx);

  /* Equivalent ECMAScript */
  try {
    function err() {
      throw new Error();
    }
    err();
  } catch (e) {
    if (e instanceof Error) {
      var stack = e.stack;
      if (stack) {
        console.log(stack);
      } else {
        console.log(e.toString());
      }
    } else {
      console.log(e.toString());
    }
  }

tags:
  - stack
  - string
  - protected

seealso:
  - duk_safe_to_string
  - duk_to_stacktrace

introduced: 2.4.0
